<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xiwan.github.io</id>
    <title>Keep Thinking</title>
    <updated>2019-08-07T11:01:46.132Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xiwan.github.io"/>
    <link rel="self" href="https://xiwan.github.io/atom.xml"/>
    <subtitle>有美人兮心不怿</subtitle>
    <logo>https://xiwan.github.io/images/avatar.png</logo>
    <icon>https://xiwan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Keep Thinking</rights>
    <entry>
        <title type="html"><![CDATA[serilog vs log4net]]></title>
        <id>https://xiwan.github.io/post/serilog-vs-log4net</id>
        <link href="https://xiwan.github.io/post/serilog-vs-log4net">
        </link>
        <updated>2019-08-07T10:58:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="目的">目的</h3>
<p>通过测试数值来比较两个库的优劣</p>
<h3 id="场景">场景</h3>
<h4 id="login-接口带业务">Login 接口（带业务）</h4>
<p>参数： 线程250， 时间20分钟， 队列长度：5w, 队列读取间隔： 1s， 不做合并写<br>
数据：<br>
0000001c00000003088080b807120464646464120012054465627567</p>
<p>log4net:<br>
<img src="http://192.168.1.153/showdoc/server/../Public/Uploads/2018-11-19/5bf26878b66af.png" alt=""></p>
<p>serilog:<br>
<img src="http://192.168.1.153/showdoc/server/../Public/Uploads/2018-11-19/5bf268d599233.png" alt=""></p>
<p>相同参数：队列积压：4k-5k区间， cpu: 300%, mem: 4% 都是差不多的。<br>
差异参数：偏差值: serilog(8.64) &lt; log4net(13.28), 吞吐量serilog也优秀5%左右。</p>
<h4 id="hearbeat-接口">hearbeat 接口</h4>
<p>参数： 线程3000， 时间20分钟， 队列长度：5w, 队列读取间隔： 1s， 不做合并写<br>
数据：<br>
000000130000000108ffffff07120130120131</p>
<p>log4net:<br>
<img src="http://192.168.1.153/showdoc/server/../Public/Uploads/2018-11-19/5bf2759097410.png" alt=""></p>
<p>serilog:<br>
<img src="http://192.168.1.153/showdoc/server/../Public/Uploads/2018-11-19/5bf26d2ba7bdb.png" alt=""></p>
<p>相同参数：cpu: 300%； mem: 4%；都是差不多的。<br>
差异参数：队列积压：serilog(25-30k), log4net(40k+)；；吞吐量:serilog(2.6w)， log4net(1.5w)；偏差值：serilog(33.42), log4net(17.78)</p>
<h3 id="观察">观察</h3>
<p>在低压力（上千并发）情况下： log4net和serilog的差距不是很明显。</p>
<p>在高压力（上万并发）情况下：这里log4net由于写的并发不高，导致它的吞吐也是一个慢慢爬坡的过程，并且队列积压严重（超过80%）；相反serilog对于写的优秀支持，它可以很快的到达吞吐并发，队列积压只有log4net的一半左右。</p>
<h3 id="延申">延申</h3>
<p>再日志放大10倍的压力下，serilog的效率和log4net差不多，都降到了1万每秒，并且有10%的错误率。原因是这个时候，大家都已经把队列撑爆了，这个时候的瓶颈就是队列了。那么通过调整参数得出下表</p>
<table>
<thead>
<tr>
<th>serilog</th>
<th>tps</th>
<th>错误率</th>
<th>队列积压 (5w)</th>
<th>预估能力</th>
</tr>
</thead>
<tbody>
<tr>
<td>10条</td>
<td>1.1w/s</td>
<td>10%</td>
<td>5w</td>
<td>-</td>
</tr>
<tr>
<td>3条</td>
<td>2.1w/s</td>
<td>0.6%</td>
<td>5w</td>
<td>-</td>
</tr>
<tr>
<td>2条</td>
<td>2.5w/s</td>
<td>0.01%</td>
<td>4.1w</td>
<td>5w/s</td>
</tr>
<tr>
<td>1条</td>
<td>2.5w/s</td>
<td>0%</td>
<td>2.5w</td>
<td>2.3w/s</td>
</tr>
</tbody>
</table>
<p>从这里看出，再队列预设5w长度情况下，serilog可以到达5w/s(但并不是它的峰值)。这么看来后续需要加长队列继续测试：</p>
<p>10w队列</p>
<table>
<thead>
<tr>
<th>serilog</th>
<th>tps</th>
<th>错误率</th>
<th>队列积压</th>
<th>预估能力</th>
</tr>
</thead>
<tbody>
<tr>
<td>10条</td>
<td>1.3w/s</td>
<td>10%</td>
<td>10w</td>
<td>-</td>
</tr>
</tbody>
</table>
<p>20w队列</p>
<table>
<thead>
<tr>
<th>serilog</th>
<th>tps</th>
<th>错误率</th>
<th>队列积压</th>
<th>预估能力</th>
</tr>
</thead>
<tbody>
<tr>
<td>10条</td>
<td>1.6w/s</td>
<td>1%</td>
<td>16w</td>
<td>15w/s</td>
</tr>
</tbody>
</table>
<p>100w队列</p>
<table>
<thead>
<tr>
<th>serilog</th>
<th>tps</th>
<th>错误率</th>
<th>队列积压</th>
<th>预估能力</th>
</tr>
</thead>
<tbody>
<tr>
<td>10条</td>
<td>1.8w/s</td>
<td>0.03%</td>
<td>2w</td>
<td>18w/s</td>
</tr>
</tbody>
</table>
<p>所以可以预估在内存充足的情况下serilog的写入能力为15w-18w之间</p>
<p>网上另一位测试者的结果也侧面证明了我的结果<br>
<img src="http://192.168.1.153/showdoc/server/../Public/Uploads/2018-11-20/5bf3b95b2663c.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于docker搭建centos模板环境]]></title>
        <id>https://xiwan.github.io/post/JMW1yxHv1</id>
        <link href="https://xiwan.github.io/post/JMW1yxHv1">
        </link>
        <updated>2019-08-07T08:29:00.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="背景">背景</h1>
<p>我们已经基于标准shell建立了一整套服务器环境搭建体系，在平常运维中，其实只要记住那一步执行哪个shell脚本就好了。但是执行了一段时间后，还是觉得不够灵活。想象如下场景：有一天你刚回收完一套环境，这个时候来了个需求需要尽快搭建一套独立环境之类。这个时候需要重新执行一次所有的脚本，时间比较慢，并且数据可靠性也无法保证。这个时候我想到了docker，虽然我们有在测试环境部分使用它的功能，但并没有真正拿他做到<strong>开箱即用</strong></p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="背景">背景</h1>
<p>我们已经基于标准shell建立了一整套服务器环境搭建体系，在平常运维中，其实只要记住那一步执行哪个shell脚本就好了。但是执行了一段时间后，还是觉得不够灵活。想象如下场景：有一天你刚回收完一套环境，这个时候来了个需求需要尽快搭建一套独立环境之类。这个时候需要重新执行一次所有的脚本，时间比较慢，并且数据可靠性也无法保证。这个时候我想到了docker，虽然我们有在测试环境部分使用它的功能，但并没有真正拿他做到<strong>开箱即用</strong></p>
<!-- more -->
<p>以下的流程只是一个测试例子，真实环境需要对不同环境来写不同的镜像。由于我比较懒，所以暂且把所有服务都放在一个镜像里面。</p>
<h1 id="基本流程">基本流程</h1>
<ol>
<li>基于centos 镜像</li>
<li>准备环境的镜像</li>
<li>导出镜像/容器</li>
</ol>
<h1 id="基于centos镜像">基于centos镜像</h1>
<p>这个比较简单，可以到docker hub上面找centos:7， 然后编写dockerfile</p>
<pre><code>FROM centos:7 AS s1
ENV container docker
RUN (cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == \
systemd-tmpfiles-setup.service ] || rm -f $i; done); \
rm -f /lib/systemd/system/multi-user.target.wants/*;\
rm -f /etc/systemd/system/*.wants/*;\
rm -f /lib/systemd/system/local-fs.target.wants/*; \
rm -f /lib/systemd/system/sockets.target.wants/*udev*; \
rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \
rm -f /lib/systemd/system/basic.target.wants/*;\
rm -f /lib/systemd/system/anaconda.target.wants/*;
VOLUME [ &quot;/data/docker/kaki&quot; ]
CMD [&quot;/usr/sbin/init&quot;]
</code></pre>
<p>这里主要设置的就是根据不同环境而挂载的VOLUME。目的是为了让镜像无状态化，中间的数据都需要存储到宿主机。</p>
<h1 id="制作环境准备的镜像">制作环境准备的镜像</h1>
<p>上一步只是完成了一些最基本的设置，接下来需要按照应用或者游戏需要应用到的服务来安装和启动。</p>
<ol>
<li>安装网络和设置yum源（通常已经有了）</li>
<li>更新yum</li>
<li>安装软件</li>
<li>配置端口</li>
</ol>
<pre><code>FROM allinone:s1 AS s2
USER root
RUN yum -y install net-tools \
  # update热更新
  &amp;&amp; yum provides '*/applydeltarpm' \ 
  &amp;&amp; yum install deltarpm -y \
  &amp;&amp; yum -y update \ 
  # 安装sshpass
  &amp;&amp; yum -y install sshpass \
  &amp;&amp; yum -y install python-setuptools \
  # 安装supervisor
  &amp;&amp; easy_install supervisor \
  # 安装subversion
  &amp;&amp; yum -y install subversion \
  # 安装dotnet
  &amp;&amp; rpm -Uvh https://packages.microsoft.com/config/rhel/7/packages-microsoft-prod.rpm \
  &amp;&amp; yum -y install aspnetcore-runtime-2.1 \
  &amp;&amp; yum -y install dotnet-sdk-2.1 \

EXPOSE 80 6379 8001 8009 8010 8011 8012 8013
CMD [&quot;/usr/sbin/init&quot;]
</code></pre>
<p>这里要注意的是，<strong>我们不能在此步骤种进行任何的service或者systemctl之类后台任务的命令</strong>，否则会导致镜像建立的失败。</p>
<p>主要原因是：Docker的设计理念是在容器里面不运行后台服务，容器本身就是宿主机上的一个独立的主进程，也可以间接的理解为就是容器里运行服务的应用进程。一个容器的生命周期是围绕这个主进程存在的，所以正确的使用容器方法是将里面的服务运行在前台。</p>
<p>systemd维护系统服务程序，它需要特权去会访问Linux内核。而容器并不是一个完整的操作系统，只有一个文件系统，而且默认启动只是普通用户这样的权限访问Linux内核，也就是没有特权，所以自然就用不了！</p>
<p>当然我们可以稍后在运行容器时候使用<strong>特权模式</strong>就可以绕开这个问题了。</p>
<p>当我们运行上述dockerfile后，检查镜像列表<br>
<img src="https://xiwan.github.io/post-images/1565169711513.png" alt=""></p>
<p><em>centos:7是最基础的，<br>
然后基于它我们构建了allinone:s1, 由于它并没有实质性的安装任何软件，所以看到大小并没有变化，这里我们可以只是作一些最基础的设置<br>
接下来看allinone:s2，可以看到大小有2G多，这里主要是安装应用需要的软件。在实际运用种可以根据服务器的角色不同而安装不同的软件。</em></p>
<h1 id="导出镜像容器">导出镜像/容器</h1>
<p>先找到容器 id导出成tar/zip都可以</p>
<pre><code>docker export df5138d2e73d &gt; test.tar
</code></pre>
<p>然后就可以把这个文件上传到公共服务器，其他服务器只需要去拉取这个镜像就可以了</p>
<pre><code>cat test.tar | docker import - allinone:s2
</code></pre>
<p>正如前面描述，由于在镜像生成中无法进行systemctl或者service的后台工作，在实际运用中导出容器比较方便。我们可以在容器中将所有的服务都挂载后台起来后，然后再导出。这样才能做到真正的开箱即用。</p>
<p>不过开箱有一个要注意的地方，需要在run/create 容器命令最后加上对应的CMD(也就是启动命令，而不是简单的bash)<br>
比如：</p>
<pre><code>docker create -v /data/docker/kaki:/data/docker/kaki --privileged=true --name=kakigameserver -p 80:80 -i allinone:s2 /usr/sbin/init
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2d 光照研究]]></title>
        <id>https://xiwan.github.io/post/test</id>
        <link href="https://xiwan.github.io/post/test">
        </link>
        <updated>2019-08-01T09:18:29.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="背景">背景</h1>
<p>最近关注了比较多的独立游戏，比如《eastward》，《the last night》和《迷雾侦探》的美术风格一下子吸引了我。经过一些资料的翻阅，发现实现它的美术效果其中很重要的一点就是 <strong>法线贴图</strong>。</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="背景">背景</h1>
<p>最近关注了比较多的独立游戏，比如《eastward》，《the last night》和《迷雾侦探》的美术风格一下子吸引了我。经过一些资料的翻阅，发现实现它的美术效果其中很重要的一点就是 <strong>法线贴图</strong>。</p>
<!-- more -->
<h2 id="原理">原理</h2>
<p><img src="https://xiwan.github.io/post-images/1564653884231.png" alt=" 原始贴图与法线贴图"></p>
<p>法线图： 基于原始图生成的。这是因为它把图片的法线向量转成了rgp通道。而面向我们的一般是z轴，所以颜色偏蓝。</p>
<pre><code>//下面是两者的互相转换公式
Color.rgb = Normal.xyz / 2.0 + 0.5;
Normal.xyz = Color.rgb * 2.0 - 1.0
</code></pre>
<h2 id="渲染步骤">渲染步骤</h2>
<p>将生成的法线和原图分别贴到材质球上面。接下来就是需要写一些shader了。至于怎么写，其实有很多教程。这里主要说明下基本的渲染步骤：</p>
<pre><code>N = normalize(Normal.xyz)
L = normalize(LightDir.xyz)
Diffuse = LightColor * max(dot(N, L), 0.0)
Ambient = AmbientColor * AmbientIntensity
Attenuation = 1.0 / (ConstantAtt + (LinearAtt * Distance) + (QuadraticAtt * Distance * Distance)) 
Intensity = Ambient + Diffuse * Attenuation
FinalColor = DiffuseColor.rgb * Intensity.rgb
</code></pre>
<h1 id="法线贴图">法线贴图</h1>
<p>这里比较有意思的一点是：这里的序列帧都可以获得该shader效果。</p>
<p><img src="https://s2.ax1x.com/2019/08/02/e0QoSP.gif" alt="e0QoSP.gif"></p>
<h1 id="添加阴影效果">添加阴影效果</h1>
<p>前景虽然看起来不错，但是有一个问题就是没有阴影</p>
<h2 id="阴影效果">阴影效果</h2>
<p><img src="https://s2.ax1x.com/2019/08/02/eBEE6J.gif" alt="eBEE6J.gif"></p>
<h1 id="参考">参考</h1>
<p><a href="https://github.com/mattdesl/lwjgl-basics/wiki/ShaderLesson6">ShaderLesson6</a><br>
<a href="https://zhuanlan.zhihu.com/p/41915682">《迷雾侦探》美术制作过程—光影篇</a></p>
]]></content>
    </entry>
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xiwan.github.io</id>
    <title>Keep Thinking</title>
    <updated>2019-08-01T10:49:02.565Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xiwan.github.io"/>
    <link rel="self" href="https://xiwan.github.io/atom.xml"/>
    <subtitle>有美人兮心不怿</subtitle>
    <logo>https://xiwan.github.io/images/avatar.png</logo>
    <icon>https://xiwan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Keep Thinking</rights>
    <entry>
        <title type="html"><![CDATA[2d 光照研究]]></title>
        <id>https://xiwan.github.io/post/test</id>
        <link href="https://xiwan.github.io/post/test">
        </link>
        <updated>2019-08-01T09:18:29.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="背景">背景</h1>
<p>最近关注了比较多的独立游戏，比如《eastward》，《the last night》和《迷雾侦探》的美术风格一下子吸引了我。经过一些资料的翻阅，发现实现它的美术效果其中很重要的一点就是 <strong>法线贴图</strong>。</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="背景">背景</h1>
<p>最近关注了比较多的独立游戏，比如《eastward》，《the last night》和《迷雾侦探》的美术风格一下子吸引了我。经过一些资料的翻阅，发现实现它的美术效果其中很重要的一点就是 <strong>法线贴图</strong>。</p>
<!-- more -->
<h1 id="原理">原理</h1>
<p><img src="https://xiwan.github.io/post-images/1564653884231.png" alt=" 原始贴图与法线贴图"></p>
<p>法线图： 基于原始图生成的。这是因为它把图片的法线向量转成了rgp通道。而面向我们的一般是z轴，所以颜色偏蓝。</p>
<pre><code>//下面是两者的互相转换公式
Color.rgb = Normal.xyz / 2.0 + 0.5;
Normal.xyz = Color.rgb * 2.0 - 1.0
</code></pre>
<h1 id="渲染步骤">渲染步骤</h1>
<p>将生成的法线和原图分别贴到材质球上面。接下来就是需要写一些shader了。至于怎么写，其实有很多教程。这里主要说明下基本的渲染步骤：</p>
<pre><code>N = normalize(Normal.xyz)
L = normalize(LightDir.xyz)
Diffuse = LightColor * max(dot(N, L), 0.0)
Ambient = AmbientColor * AmbientIntensity
Attenuation = 1.0 / (ConstantAtt + (LinearAtt * Distance) + (QuadraticAtt * Distance * Distance)) 
Intensity = Ambient + Diffuse * Attenuation
FinalColor = DiffuseColor.rgb * Intensity.rgb
</code></pre>
<p>shader 部分， 写得比较乱</p>
<pre><code>Shader &quot;Unlit/Light2D&quot;
{
	Properties
	{
		_MainTex(&quot;Texture&quot;, 2D) = &quot;white&quot; {}
		_BumpTex(&quot;BumpTex&quot;, 2D) = &quot;white&quot; {}
		_CamPos(&quot;CamPos&quot;, Vector) = (0,0,0,0)
		_LightPos(&quot;LightPos&quot;, Vector) = (0,0,0,0)
		_LightColor(&quot;LightColor&quot;, Color) = (0,0,0,0)
		_LightAmbientColor(&quot;LightAmbientColor&quot;, Color) = (0,0,0,0)
		_LightAmbientStrength(&quot;LightAmbientStrength&quot;, Range(0, 1)) = 0.1
			//_Resolution(&quot;Resolution&quot;, Vector) = (800,600,0,0)
			_Falloff(&quot;Falloff&quot;, Vector) = (0, 0, 3, 0)
	}
		SubShader
		{
			Tags {
				&quot;Queue&quot; = &quot;Transparent&quot;
				&quot;IgnoreProjector&quot; = &quot;True&quot;
				&quot;RenderType&quot; = &quot;Transparent&quot;
				&quot;PreviewType&quot; = &quot;Plane&quot;
				&quot;CanUseSpriteAtlas&quot; = &quot;True&quot;
			}
			LOD 200

			Pass
			{
				Cull Off
				Lighting Off
				ZWrite Off
				Fog { Mode Off }
				Blend SrcAlpha OneMinusSrcAlpha

				CGPROGRAM
				#pragma vertex vert
				#pragma fragment frag

				#include &quot;UnityCG.cginc&quot;

				struct appdata
				{
					float4 vertex : POSITION;
					float2 texcoord : TEXCOORD0;
					float3 normal :NORMAL;
				};

				struct v2f
				{
					float3 worldNormal : TEXCOORD0;
					float3 worldPos : TEXCOORD1;
					float4 uv : TEXCOORD2;
					float3 lightDir : TEXCOORD3;
					float3 viewDir : TEXCOORD4;
					float4 pos : SV_POSITION;
				};

				sampler2D _MainTex;
				float4 _MainTex_ST;
				sampler2D _BumpTex;
				float4 _BumpTex_ST;
				float4 _CamPos;
				fixed4  _LightColor;
				float4 _LightPos;
				fixed4 _LightAmbientColor;
				half _LightAmbientStrength;
				float4 _Falloff;
				fixed2 _Resolution;

				v2f vert(appdata v)
				{
					v2f o;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.worldNormal = UnityObjectToWorldNormal(v.normal);
					o.worldPos = mul(unity_ObjectToWorld,v.vertex).xyz;
					//o.uv.xy = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;  // xy存主纹理的纹理坐标
					//o.uv.zw = v.texcoord.xy * _BumpTex_ST.xy + _BumpTex_ST.zw;  // zw存凹凸感的纹理坐标
					// 变换纹理，先缩放（乘xy），后偏移（加zw）。下同，下面是内置函数。
					o.uv.xy = TRANSFORM_TEX(v.texcoord,_MainTex);
					o.uv.zw = TRANSFORM_TEX(v.texcoord, _MainTex);

					o.lightDir = float3(_LightPos.xy - o.pos.xy, _LightPos.z);
					o.viewDir = float3(_CamPos.xy - o.pos.xy, _CamPos.z);
					return o;
				}

				fixed4 frag(v2f i) : SV_Target
				{
					//RGBA of our diffuse color
					fixed4 diffuseColor = tex2D(_MainTex, i.uv);
				//RGB of our normal map
				fixed3 nomarlMap = UnpackNormal(tex2D(_BumpTex, i.uv.zw));

				//Determine distance (used for attenuation) BEFORE we normalize our LightDir
				float D = length(i.lightDir);
				//normalize our vectors
				float3 N = normalize(nomarlMap);
				float3 L = normalize(i.lightDir);
				float3 V = normalize(i.viewDir);
				float3 R = reflect(-i.lightDir, N);

				//float spec = pow(max(dot(V, R), 0.0), 32);
				//half specularStrength = 0.5;
				//fixed3 specular = specularStrength * spec * (_LightColor.rgb);

				//Pre-multiply light color with intensity
				//Then perform &quot;N dot L&quot; to determine our diffuse term
				fixed3 lamber = max(dot(N, L), 0);
				fixed3 diffuse = lamber * (_LightColor.rgb * _LightColor.a);
				//pre-multiply ambient color with intensity
				fixed3 ambient = _LightAmbientColor.rgb * _LightAmbientColor.a * _LightAmbientStrength;
				//calculate attenuation
				float attenuation = 1.0 / (_Falloff.x + (_Falloff.y * D) + (_Falloff.z * D * D));

				//the calculation which brings it all together
				fixed3 intensity = ambient + diffuse * attenuation;
				fixed3 finalcolor = diffuseColor.rgb * intensity;
				return fixed4(finalcolor, diffuseColor.a);
			}
			ENDCG
		}
		}
}

</code></pre>
<h1 id="最终效果图">最终效果图</h1>
<p><img src="https://s2.ax1x.com/2019/08/01/eaDlMd.gif" alt="eaDlMd.gif"></p>
<h1 id="参考">参考</h1>
<p><a href="https://github.com/mattdesl/lwjgl-basics/wiki/ShaderLesson6">ShaderLesson6</a><br>
<a href="https://zhuanlan.zhihu.com/p/41915682">《迷雾侦探》美术制作过程—光影篇</a></p>
]]></content>
    </entry>
</feed>